
1.람다식이란?
- 람다식은 자바에서 JDK8버전이후에 함수형 프로그래밍을 도입하면서
	기존에 사용되던 익명 클래스와 복잡한 코드 구조를 간결하게 대체할수 있는
	익명함수(익명메소드)를 생성하는 식입니다.
	
- 람다식은 익명함수라고 할수있으며, 익명객체 내부에서 작성된 익명메서드의 역할을 합니다.
  다만, 자바 컴파일러는 이를 더 최적화된 방식으로 처리하여
  익명 클래스보다 더 간결하고 효율적인 코드를 제공합니다.
  
- 람다식은 이름이 없는 익명객체 내부에 익명메서드를 정의하는 식이며
  이 익명 메서드는 하나의 함수형 인터페이스를 구현합니다.
  
  참고. 함수형 인터페이스는 오직 하나의 추상메소드만 가지는 인터페이스를 말함

--------------------------------------------------------------------------

2.람다식 문법

	람다식 기본문법 1.
	
		(파라미터) -> {실행할코드 작성}

	설명
		람다식문법은 세가지 요소로 이루어집니다.
		1. (파라미터) : 람다식에 입력으로 전달되는 매개변수들
		2. 화살표 연산자 -> : 파라미터와 {실행할코드}본문을 구분하는 연산자
		3. {실행할코드} 함수의 본문 : 실제로 실행될 코드를 작성할 영역
		
-----------------------------------------------------------------------------
	람다식 기본분법1 예시1)
		
		(int a, int b) -> { return a+b;	}
		
		설명 : 위 코드는 두개의 정수를 a와 b매개변수로 받아 그 합을 반환하는 람다식입니다.
		
-----------------------------------------------------------------------------

	람다식 기본분법1 예시2) : 타입 생략 가능 (int, retun, {})
	
		(a, b) -> a+b

		설명 : 컴파일러가 파라미터의 타입을 추론할수 있을때는 타입을 생략할 수 있습니다.
		
-------------------------------------------------------------------------------

	람다식 기본분법1 예시3) : 매개변수가 하나일때 ()괄호 생략 가능

		s -> System.out.println(s)

		설명 : 매개변수가 하나인 경우 괄호()도 생략할 수 있습니다.
		
-------------------------------------------------------------------------------

	람다식 기본분법1 예시4) : 코드블록 {		}

		(a, b) -> {
						
			int sum = a + b;
			System.out.println("sum : " + sum);
			return sum;
			
		}

	설명 : 람다식에서 여러 줄의 코드를 작성할떄는 {}중괄호를 사용하여 코드 블록을 정의할 수 있다.
		
-------------------------------------------------------------------------------

	3. 함수형 인터페이스?
	
	람다식을 사용하기 위해서는 자바의 함수형인터페이스가 필요합니다.
	함수형 인터페이스는 오직 하나의 추상메소드를 가지는 인터페이스로,
	자바에서 람다식을 사용할 수 있는 기반을 제공합니다.
	자바는 이러한 함수형 인터페이스를 여러개 제공하며
	이는 모두 java.util.function 패키지에 포함되어 있습니다.
	
	함수형 인터페이스 예 실습 -Ex1.java

	사용자(개발자)정의 함수형 인터페이스를 만들어서 사용한 예 실습 -> Main.java

-------------------------------------------------------------------------------

	4. 람다식을 스트림(Stream) API에서 활용

	스트림API
	-컬렉션(List,Set 등의 가변길이배열)에서 데이터 흐름을 처리하는데 사용되는 API
	-데이터의 필터링, 변환, 집계 등의 작업을 함수형 인터페이스로 수행할 수 있는 API
	-스트림은 기본적으로 데이터를 한번만 처리하는 통로 방식으로 동작하며, 중간연산과 최종연산으로 구분됩니다.
	
	데이터필터링 및 변환 활용 예시 -Ex2.java
	




